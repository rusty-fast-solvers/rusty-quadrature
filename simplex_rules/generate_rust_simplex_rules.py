"""
Generate a Rust file containing the quadrature rules
generated by polyquad.
"""

import os
import numpy as np

all_rule_files = []
orders = []
npoints = []

for (dirpath, dirnames, filenames) in os.walk("."):
        all_rule_files += [os.path.join(dirpath, file) for file in filenames if file.endswith(".txt")]

for rule_file in all_rule_files:
    base = os.path.basename(rule_file)
    order_str, points_str = os.path.splitext(base)[0].split("-")
    orders += [int(order_str)]
    npoints += [int(points_str)]

with open("simplex_rule_definitions.rs", 'w') as f:
    f.write("//! Definition of simplex rules.\n")
    f.write("\n")
    f.write("use std::collections::HashMap;\n")
    f.write("use rusty_element::cell::ReferenceCellType;\n")
    f.write("\n")
    f.write("lazy_static! {\n")
    f.write("pub(crate) static ref SIMPLEX_DEFINITIONS: HashMap<ReferenceCellType, HashMap<usize, (Vec<f64>, Vec<f64>)>> = {\n")
    f.write("let mut m = HashMap::<ReferenceCellType, HashMap<usize, (Vec<f64>, Vec<f64>)>>::new();\n")
    f.write("m.insert(ReferenceCellType::Triangle, HashMap::<usize, (Vec<f64>, Vec<f64>)>::new());\n")
    f.write("m.insert(ReferenceCellType::Quadrilateral, HashMap::<usize, (Vec<f64>, Vec<f64>)>::new());\n")
    f.write("m.insert(ReferenceCellType::Hexahedron, HashMap::<usize, (Vec<f64>, Vec<f64>)>::new());\n")
    f.write("m.insert(ReferenceCellType::Tetrahedron, HashMap::<usize, (Vec<f64>, Vec<f64>)>::new());\n")
    f.write("m.insert(ReferenceCellType::Prism, HashMap::<usize, (Vec<f64>, Vec<f64>)>::new());\n")
    f.write("m.insert(ReferenceCellType::Pyramid, HashMap::<usize, (Vec<f64>, Vec<f64>)>::new());\n")



    for (index, rule_file) in enumerate(all_rule_files):
        identifier = None
        if rule_file.startswith("./quad"):
            identifier = "ReferenceCellType::Quadrilateral"
        elif rule_file.startswith("./tri"):
            identifier = "ReferenceCellType::Triangle"
        elif rule_file.startswith("./hex"):
            identifier = "ReferenceCellType::Hexahedron"
        elif rule_file.startswith("./pri"):
            identifier = "ReferenceCellType::Prism"
        elif rule_file.startswith("./tet"):
            identifier = "ReferenceCellType::Tetrahedron"
        elif rule_file.startswith("./pyr"):
            identifier = "ReferenceCellType::Pyramid"
        else:
            raise ValueError("Unknown simplex type.")

        arr = np.atleast_2d(np.loadtxt(rule_file))
        points = arr[:, :-1].flatten()
        weights = arr[:, -1].flatten()

        f.write("m.get_mut(&" + identifier + ").unwrap().insert(\n")

        
        f.write(str(npoints[index]) + ", \n")
        f.write("(vec![")
        for point in points:
            f.write(f"{point},")
        f.write("],\n")
        f.write("vec![\n")
        for weight in weights:
            f.write(f"{weight},")
        f.write("]));\n")

    f.write("m };\n}")

os.system("rustfmt ./simplex_rule_definitions.rs")



# use std::collections::HashMap;
# use rusty_element::cell::ReferenceCellType;

# lazy_static! {
#     static ref MY_MAP: HashMap<ReferenceCellType, HashMap<u32, QuadraturePair>> = {
#         let mut m = HashMap::<ReferenceCellType, HashMap<u32, QuadraturePair>>::new();
#         m.insert(ReferenceCellType::Triangle, {
#             let mut inner = HashMap::<u32, QuadraturePair>::new();
#             inner.insert(0, (vec![0.0, 1.0], vec![2.0, 2.0]));
#             inner
#         });
#         m

#     };
# }
